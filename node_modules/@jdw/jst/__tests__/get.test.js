"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
const index_1 = require("./../index");
describe('@jdw/jst/get', () => {
    const fixture = {
        'foo': {
            bar: 20,
        },
        '/': {
            '~': 400,
            'bar': {
                '~': 10,
            },
            '/foo': {
                $ref: '#/foo',
            },
        },
        'arr': [{
                arr: [{
                        foo: 100,
                    }],
            }, 30],
    };
    it('should resolve valid JSON pointers', () => {
        const cases = [
            ['/foo/bar', 20],
            ['#/foo/bar', 20],
            ['', fixture],
        ];
        cases.forEach((t) => {
            chai_1.expect(index_1.get(fixture, t[0].toString())).to.eq(t[1]);
        });
    });
    it('can resolve the encoded values of the / and ~ symbols correctly', () => {
        const cases = [
            ['#/~1/~0', 400],
            ['#/~1/bar/~0', 10],
        ];
        cases.forEach((t) => {
            chai_1.expect(index_1.get(fixture, t[0].toString())).to.eq(t[1]);
        });
    });
    it('can resolve JSON pointers that reference array indexes correctly', () => {
        const cases = [
            ['#/arr/0/arr/0/foo', 100],
            ['#/arr/1', 30],
        ];
        cases.forEach((t) => {
            chai_1.expect(index_1.get(fixture, t[0].toString())).to.eq(t[1]);
        });
    });
    it('should throw an error up-front when providing an invalid json pointer', () => {
        const cases = [
            'abcd',
            '~#/foo/bar',
            'foo/bar',
        ];
        cases.forEach((t) => {
            chai_1.expect(() => index_1.get(fixture, t)).to.throw();
        });
    });
});
//# sourceMappingURL=get.test.js.map