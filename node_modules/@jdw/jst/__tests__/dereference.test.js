"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
const index_1 = require("./../index");
const lib_1 = require("./lib");
describe('dereference schema utility function', () => {
    it('dereferences referenced schema correctly', () => {
        const ast = index_1.dereference(lib_1.resolve('http://footown.com/generic/address#'), lib_1.resolve);
        chai_1.expect(ast.properties).to.have.property('addressLines');
        chai_1.expect(ast.properties).to.have.property('contact');
        chai_1.expect(ast.properties.contact).to.have.property('properties');
        chai_1.expect(ast.properties.contact.properties).to.have.property('firstname');
        chai_1.expect(ast.properties.contact.properties).to.have.property('lastname');
        chai_1.expect(ast.properties.contact.properties).to.have.property('title');
    });
    it('dereferences schema correctly with multiple arguments', () => {
        const schema = [
            lib_1.resolve('http://footown.com/generic/address#'),
            lib_1.resolve('http://footown.com/generic/address-override#'),
        ];
        const ast = index_1.dereference(schema, lib_1.resolve);
        chai_1.expect(ast.properties).to.have.property('addressLines');
        chai_1.expect(ast.properties).to.have.property('country');
        chai_1.expect(ast.properties.country).to.have.property('enum');
        chai_1.expect(ast.properties.country.enum).to.deep.eq(['AU', 'GB', 'VN', 'DE', 'CH']);
        chai_1.expect(ast.properties).to.have.property('contact');
        chai_1.expect(ast.properties.contact).to.have.property('properties');
        chai_1.expect(ast.properties.contact.properties).to.have.property('firstname');
        chai_1.expect(ast.properties.contact.properties).to.have.property('lastname');
        chai_1.expect(ast.properties.contact.properties).to.have.property('title');
    });
    it('can dereference circular schema references', () => {
        const schema = lib_1.resolve('http://footown.com/generic/edit-person+v1#');
        const ast = index_1.dereference(schema, lib_1.resolve);
        chai_1.expect(ast).to.have.property('allOf');
        chai_1.expect(ast.allOf.length).to.eq(1);
        chai_1.expect(ast.allOf[0]).to.have.property('properties');
    });
    it('dereferences null values correctly', () => {
        const schema = lib_1.resolve('http://footown.com/generic/edit-person+v1#');
        const ast = index_1.dereference(schema, lib_1.resolve);
        chai_1.expect(ast.foo).to.eq(null);
    });
    it('dereferences circular references correctly', () => {
        const schema = lib_1.resolve('http://footown.com/generic/circular#');
        const ast = index_1.dereference(schema, lib_1.resolve);
        chai_1.expect(ast).to.be.an('object');
    });
    it('dereferences conditional allOf references correctly', () => {
        const schema = lib_1.resolve('http://footown.com/generic/conditional#');
        const ast = index_1.dereference(schema, lib_1.resolve);
        chai_1.expect(ast).to.be.an('object');
        chai_1.expect(ast.allOf[0]).deep.eq({
            type: 'object',
            properties: {
                foobar: {
                    type: 'string',
                    minLength: 1,
                },
            },
        });
        chai_1.expect(ast.allOf[1]).deep.eq({
            type: 'object',
            properties: {
                barfoo: {
                    type: 'number',
                },
            },
        });
    });
    it('can dereference referenced circular schema correctly', () => {
        const schema = require('./fixture/circular-referenced.schema.json');
        const ast = index_1.dereference(schema, lib_1.resolve);
        chai_1.expect(ast).to.be.an('object');
        chai_1.expect(ast.properties.circular.properties.circle.id).to.eq('http://footown.com/generic/circular#');
    });
    it('dereferences without a resolver', () => {
        const schema = require('./fixture/profile+v1.schema.json');
        const ast = index_1.dereference(schema);
        chai_1.expect(ast).to.be.an('object');
        chai_1.expect(ast.properties.profile).deep.eq({
            type: 'object',
            properties: {
                avatarUrl: {
                    description: 'The url that the users avatar can be found on',
                    type: 'string',
                    format: 'uri',
                },
                pictures: {
                    type: 'array',
                    items: [
                        {
                            type: 'string',
                            format: 'uri',
                        },
                    ],
                },
            },
        });
    });
    it('fails when attempting to dereference remote references without a resolver', () => {
        const schema = require('./fixture/address+v1.schema.json');
        chai_1.expect(() => index_1.dereference(schema)).to.throw('argument: resolver is required to dereference a json uri.');
    });
    it('can dereference a circular schema referenced in a json object with special characters as keys', () => {
        const payload = {
            bar: {
                '/nomo': {
                    'char/foo': {
                        $ref: 'http://schema.foo.com/spec',
                    },
                },
            },
        };
        const schema = {
            id: 'http://schema.foo.com/spec',
            properties: {
                circularFoo: {
                    $ref: 'http://schema.foo.com/spec',
                },
            },
        };
        const mresolve = (id) => schema;
        const result = index_1.dereference(payload, mresolve);
        chai_1.expect(result).to.deep.eq({
            bar: {
                '/nomo': {
                    'char/foo': {
                        id: 'http://schema.foo.com/spec',
                        properties: {
                            circularFoo: {
                                id: 'http://schema.foo.com/spec',
                                properties: {
                                    circularFoo: {
                                        $ref: 'http://schema.foo.com/spec',
                                    },
                                },
                            },
                        },
                    },
                },
            },
        });
    });
});
//# sourceMappingURL=dereference.test.js.map