"use strict";
// JST - JSON Schema Toolkit [![Build Status](https://travis-ci.org/jdwije/jst.svg?branch=master)](https://travis-ci.org/jdwije/jst)
// ===
Object.defineProperty(exports, "__esModule", { value: true });
// > A library for working with [json schema](http://json-schema.org/).
// JST is a utility library for working with json schema. It provides functions
// for json pointers and json references.
// ## Interface
// ### dereference(schema: Object, resolve: (id) => Object)
// A generic dereferencer function to resolve all `$ref` tags in a schema and
// inline the results.
// * [documentation](dereference.html)
const dereference_1 = require("./dereference");
exports.dereference = dereference_1.dereference;
// ### get(object: Object, pointer: String)
// Retrieve a value from an object using a json pointer.
// * [documentation](get.html)
const get_1 = require("./get");
exports.get = get_1.get;
// ### set(object: Object, pointer: String, value: any)
// Set a value on an object using a json pointer.
// * [documentation](set.html)
const set_1 = require("./set");
exports.set = set_1.set;
// ### isPointer(string: string)
// Checks of a string is a valid json pointer.
// * [documentation](isPointer.html)
const isPointer_1 = require("./isPointer");
exports.isPointer = isPointer_1.isPointer;
// ### encodeToken(string: string) -> string
// encodes a string for safe use as a json pointer token.
// * [documentation](encodeToken.html)
const encodeToken_1 = require("./encodeToken");
exports.encodeToken = encodeToken_1.encodeToken;
// ### decodeToken(string: string) -> string
// decodes a json token unsecaping special character.
// * [documentation](decodeToken.html)
const decodeToken_1 = require("./decodeToken");
exports.decodeToken = decodeToken_1.decodeToken;
//# sourceMappingURL=index.js.map